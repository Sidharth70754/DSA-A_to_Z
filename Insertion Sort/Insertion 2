#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
    
    Node(int value) {
        data = value;
        next = nullptr;
    }
};

class LinkedList {gu
private:
    Node* head;

public:
    LinkedList() {
        head = nullptr;
    }


    void insertNode(int value, int position) {
        Node* newNode = new Node(value);

        if (position == 1 || head == nullptr) {
            newNode->next = head;
            head = newNode;
            return;
        }

        Node* temp = head;
        for (int i = 1; i < position - 1 && temp != nullptr; ++i) {
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Position out of range!" << endl;
            return;
        }

        newNode->next = temp->next;
        temp->next = newNode;
    }


    void deleteNode(int position) {
        if (head == nullptr) {
            cout << "List is empty, deletion not possible!" << endl;
            return;
        }

        Node* temp = head;

        if (position == 1) {
            head = head->next;
            delete temp;
            return;
        }

        for (int i = 1; i < position - 1 && temp != nullptr; ++i) {
            temp = temp->next;
        }

        if (temp == nullptr || temp->next == nullptr) {
            cout << "Position out of range!" << endl;
            return;
        }

        Node* nodeToDelete = temp->next;
        temp->next = temp->next->next;
        delete nodeToDelete;
    }
    void displayList() {
        Node* temp = head;

        while (temp != nullptr) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

int main() {
    LinkedList list;
    
    list.insertNode(5, 1); 
    list.insertNode(10, 2); 
    list.insertNode(15, 2);
    
    cout << "Linked List: ";
    list.displayList(); 

    list.deleteNode(2); 

    cout << "After deletion: ";
    list.displayList(); 

    return 0;
}
